*** 1-_Introduction ***

## **Introduction to Web Development**

Welcome to your web development journey. This course is structured to guide you through the foundational elements of web development and gradually help you build a complete, beautiful web page by the end.

### **Section Overview: Fundamentals of Web Development**

In this section, you will:

1. **Learn Core Web Concepts**
   - Understand the essential languages and tools used in web development.
   - Get familiar with key terminology such as:
     - URL (Uniform Resource Locator)
     - HTTP (HyperText Transfer Protocol)
     - DOM (Document Object Model)

2. **Understand How Websites Work**
   - Explore what happens behind the scenes when you visit a website using a browser.
   - Gain insight into how browsers, servers, and the internet interact.

3. **Use Chrome DevTools**
   - Learn how to inspect network traffic.
   - Explore how developers use DevTools to debug and optimize front-end code.

4. **Introduction to HTML & CSS**
   - Cover the basics of HTML for structuring content.
   - Learn CSS for styling your web pages.

5. **Validate Web Pages**
   - Understand how to ensure your web pages are properly coded and standards-compliant.
   - Learn why validation is important and how to do it correctly.

---

### **Conclusion**

This is the beginning of an exciting journey into the world of web development. Each concept will build on the previous one, leading you toward creating your first complete and polished web page.

Let’s jump in and get started.


*** 2-_Languages_and_Tools_of_Web_Development ***

## **Web Development Roadmap: Your First Steps**

This course marks the beginning of your journey into web development. Here’s a simple roadmap to help you understand where you are and what your next steps should be.

---

### **1. Understanding the Structure of a Website**

Every website has two main parts:

- **Frontend**  
  The part users interact with in their browsers — includes visuals, layout, and user interactions.

- **Backend**  
  The behind-the-scenes part — responsible for storing and managing data, typically in databases, and providing this data to the frontend.

---

### **2. Web Development Career Paths**

Web development jobs typically fall into one of the following categories:

- **Frontend Developer**  
  Works on visual aspects using:
  - HTML (HyperText Markup Language): Defines the structure of web pages.
  - CSS (Cascading Style Sheets): Adds style and design to web pages.
  - JavaScript: Adds interactivity and dynamic behavior.

- **Backend Developer**  
  Focuses on server-side logic, databases, APIs (not covered in this course).

- **Full-Stack Developer**  
  Works on both frontend and backend.

---

### **3. Core Frontend Technologies**

#### **HTML**
- Defines the structure and building blocks of a web page (e.g., images, text, buttons).

#### **CSS**
- Handles visual styling: fonts, colors, spacing, layout, responsiveness, animations.

#### **JavaScript**
- Adds interactivity and behavior (e.g., clicking a button, liking a tweet).
- It's a **programming language**, unlike HTML and CSS.

---

### **4. Web Page Analogy**

**Think of a web page like a building:**

- **HTML** = Structure (walls, rooms)
- **CSS** = Aesthetics (paint, tiles, decor)
- **JavaScript** = Functionality (elevators, doors that open)

---

### **5. Example: Building a Tweet Layout**

- **HTML**: Create layout blocks (image, username, message, icons).
- **CSS**: Style the page (bold text, rounded images, hover effects).
- **JavaScript**: Add functionality (liking, retweeting, commenting).

---

### **6. Learning Timeline for Beginners**

- **HTML & CSS**:  
  Spend 3–5 hours daily  
  → Gain solid foundation in 4–6 weeks

- **JavaScript**:  
  Continue for another 6 weeks  
  → Not an expert, but a practical understanding

- **Projects**:  
  Apply knowledge and continue learning by building things.

---

### **7. Frontend Frameworks and Libraries**

- Help streamline development and reduce repetitive tasks.
- Popular choices include:
  - **React** (library) — most widely used, recommended for beginners
  - **Angular** (framework)
  - **Vue** (framework)

> Once you know React, it’s easier to learn others as needed.

- Learning React may take 1–2 months.

---

### **8. Version Control with Git**

- Used to track code history and collaborate with others.
- **Git** is the most popular system (used by 70%+ of companies).
- Other systems: Subversion, Mercurial.
- Learning Git takes about **two weeks**.
- Essential for every job in web development.

---

### **9. Summary: Essential Frontend Skills**

Focus on these four core areas:

1. HTML  
2. CSS  
3. JavaScript  
4. Git

These are required in almost every frontend development job.

> **Tip:** Don’t try to learn too many things at once. Focus, practice, and grow steadily.

---

### **Next Topic**

We'll dive into **how the web works** — understanding the browser, servers, and what happens when you visit a website.


*** 3-_How_the_Web_Works ***

## **How the Web Works: Step-by-Step Explanation**

Have you ever wondered what happens when you type a website address into your browser and hit enter? In this lesson, 
we’ll walk through the entire process and explain key concepts every web developer should understand.

---

### **1. The Role of the URL**

- When you visit a website like `facebook.com`, the address you type in the browser is called a **URL**.
- **URL** stands for **Uniform Resource Locator**.
- It identifies and locates a specific resource on the internet.
  - Resources can be:  
    - HTML documents (web pages)  
    - Images  
    - Videos  
    - Fonts  
    - And more

---

### **2. The Client-Server Model**

- **Client**: Your browser
- **Server**: The computer that hosts the website
- Your browser (client) sends a request to the web server asking for the homepage.
- The server processes the request and sends back a response.

> This model is similar to sending a text message. Your phone sends (client), your friend’s phone receives (server).

---

### **3. Communication with HTTP**

- The browser communicates with the server using the **HTTP protocol**:
  - **HTTP**: Hypertext Transfer Protocol — a textual protocol for communication.
  - **HTTPS**: Secure version of HTTP with encryption.
- HTTP is not a programming language, but a set of rules for how clients and servers talk.

---

### **4. HTTP Request Example (Simplified)**

When you visit a website, your browser sends an HTTP request like:

-------------------code----------------------
GET /index.html HTTP/1.1  
Host: codewithmosh.com  
Accept-Language: en
-------------------code----------------------

- The browser requests `index.html` (often the homepage).
- It includes the host and other optional headers.

---

### **5. HTTP Response Example (Simplified)**

The server responds with an HTTP response:

-------------------code----------------------
HTTP/1.1 200 OK  
Date: [server date & time]  
Content-Type: text/html  

<html>...</html>
-------------------code----------------------

- The `200 OK` status code means the request was successful.
- The server sends back the HTML document for the page.

---

### **6. The DOM (Document Object Model)**

- Once the browser receives the HTML, it constructs a **DOM**.
- The DOM is a structured representation of all the elements in the page.
- These include:
  - Paragraphs
  - Images
  - Links
  - Headings
  - And more

---

### **7. Fetching Additional Resources**

- While reading the HTML, the browser may find links to other resources:
  - Images
  - Fonts
  - CSS files
  - JavaScript files
- For each resource, the browser sends separate HTTP requests.
- These requests are often sent **in parallel** to improve performance.

---

### **8. Rendering the Page**

- Once all necessary resources are downloaded, the browser **renders** the page.
- **Rendering** means converting the HTML and resources into a visual display that you see in the browser.

---

### **Summary**

1. You enter a URL in the browser.
2. The browser (client) sends an HTTP request to the server.
3. The server sends back an HTTP response with the HTML document.
4. The browser parses the HTML and constructs the DOM.
5. The browser fetches other required resources.
6. Finally, the browser renders the page.

---

### **Next Lesson Preview**

In the next lesson, you’ll see these steps demonstrated in action.


*** 4-_Inspecting_HTTP_Requests_and_Responses ***

## **Inspecting HTTP Requests and Responses Using Chrome DevTools**


### **1. Accessing Chrome DevTools**

- Open **Chrome** and go to **google.com**.
- To open DevTools:
  - Go to the menu: `View > Developer > Developer Tools`
  - **Keyboard shortcuts:**
    - macOS: `Option + Command + I`
    - Windows: `Ctrl + Shift + I` (or similar depending on version)
- Remember the shortcut for faster access in the future.

---

### **2. DevTools Layout**

- DevTools includes various tabs:
  - `Elements`, `Console`, `Sources`, `Network`, and more.
- We're focusing on the **Network** tab to inspect HTTP traffic.
- DevTools can be docked:
  - Bottom (default)
  - Left / Right
  - **Undocked** as a separate window (recommended for more workspace)

---

### **3. Refresh the Page to See Network Requests**

- After opening the Network tab:
  - Refresh the page to capture network traffic:
    - macOS: `Command + R`
    - Windows: `Ctrl + R`
    - Or click the **Refresh** button in the browser.
- You'll now see a list of **HTTP requests** made by the browser.

---

### **4. Analyzing HTTP Requests**

- Each item in the list is a request made to load a resource.
- The first request is usually for the **HTML document** (e.g., `google.com`).
  - **Request Type**: `document`
  - **Status Code**: `200 OK`
  - **Transferred Data**: e.g., 94KB
  - **Time Taken**: Duration to get the response

---

### **5. Viewing Request Details**

- Click on any request to view more info.
- In the **Headers** tab:
  - **General Info**:
    - **Request URL**
    - **Request Method**: usually `GET`
    - **Status Code**: e.g., `200`
    - **Remote Address**: IP of the server
  - **Response Headers**:
    - **Content-Type**: e.g., `text/html`
    - **Date**: Response timestamp
- In the **Preview** tab:
  - See a rendered preview of the HTML document returned from the server.

---

### **6. Loading Additional Resources**

- The initial HTML document includes links to:
  - Images (e.g., `.png`)
  - Fonts (e.g., `.woff`, `.ttf`)
  - CSS, JavaScript files
- Each of these resources triggers **separate HTTP requests**.
- You can identify these in the list below the main request.

---

### **7. Filtering Requests**

- Use the **Filter icon** to narrow down request types:
  - `All` (default)
  - `Doc` – HTML documents
  - `Font` – Font files
  - `Image`, `Script`, `XHR`, etc.

---

### **Next Steps**

- In the next lesson, you'll learn how to:
  - Create your **first HTML document**
  - Write basic content
  - Explore how different fonts and resources are used
  - Learn how to **publish files online**, potentially via platforms like YouTube

*** 5-_HTML_Basics ***

# **Creating Your First HTML Document**

### 1. **Setup**

- **Create a folder** on your desktop or anywhere on your computer. Name it `html` (or any other name).
- **Open Visual Studio Code (VS Code)**.
- Go to the **Explorer panel**, select **“Open Folder”**, and open the newly created folder.
- Inside this folder, create a new file named `index.html`.
  - `index.html` typically represents the homepage of a website.

---

### 2. **Basic HTML Structure**

#### a. **DocType Declaration**
- Begin with the `<!DOCTYPE html>` declaration.
  - This tells the browser you’re using HTML5.
  - Although HTML is not case-sensitive, the convention is to use uppercase for `DOCTYPE`.

#### b. **HTML Boilerplate**
- Add the `<html>` element using `html` + `Tab`.
- Inside `<html>`, add:
  - `<head>`: Contains meta-information about the document.
  - `<body>`: Contains visible content.

#### c. **Head Section**
- Add a `<title>` element inside `<head>`.
  - Example: `<title>My First Web Page</title>`

---

### 3. **Launching with Live Server**

- Save the file (`Cmd + S` on Mac, `Ctrl + S` on Windows).
- **Right-click** in the editor and choose **“Open with Live Server”**.
- The browser opens at `http://127.0.0.1:<port>/index.html`.
  - `127.0.0.1` is the loopback IP (your local computer).
  - The port number is where your local server listens for requests.

---

### 4. **Adding Content to the Body**

#### a. **Image Element**
- Use the `<img>` tag to display an image:
-------------------code----------------------
  <img src="images/mosh.jpg" />
-------------------code----------------------
- **Differences of `<img>`:**
  - It is a **self-closing tag** (does not need a closing tag).
  - In HTML5, you **do not need** a trailing slash (`/`) at the end.
- Create an `images` folder in the project directory.
- Drop the desired image inside it (e.g., `mosh.jpg`).
- The `src` path becomes `images/mosh.jpg`.

#### b. **Text Content**
- Add a paragraph for the Twitter handle:
-------------------code----------------------
  <p>@moshhamadani</p>
-------------------code----------------------
- Add another paragraph for the tweet content:
-------------------code----------------------
  <p>I love to teach you HTML.</p>
-------------------code----------------------

---

### 5. **Viewing the Page**

- When using Live Server:
  - The page **auto-refreshes** upon saving changes.
- The image and text elements now appear on the page.
  - However, the layout and styling are plain.
  - It doesn’t look like a tweet yet because **CSS has not been applied**.

---

### 6. **Conclusion**

- **HTML** defines the **structure** of a web page.
- In the next lesson, **CSS** will be introduced to style and visually enhance the content.

*** 6-_CSS_Basics ***
# Lesson: Introduction to CSS

## 1. Adding CSS to the Page
- In the `<head>` element, after the `<title>`, add a `<style>` element.
- Write CSS code between the `<style>` tags.

## 2. Writing CSS Rules
- A CSS rule consists of:
  - A **selector** (e.g., `img`) to select the element.
  - A **pair of curly braces `{}`** containing one or more **declarations**.
  - Each **declaration** has:
    - A **property** (e.g., `width`),
    - A **value** (e.g., `100px`),
    - Separated by a colon `:`,
    - Ending with a semicolon `;`.

### Example
-------------------code----------------------
img {
  width: 100px;
}
-------------------code----------------------

## 3. Improving the Image
- The image is too large, so we:
  - Set `width` to `100px`.
- Save changes and refresh to see the smaller image.

### Making Edges Softer
- Add `border-radius` property:
-------------------code----------------------
img {
  width: 100px;
  border-radius: 10px;
}
-------------------code----------------------
- This makes the image edges rounder and softer.

### Making the Image Completely Round
- Set `border-radius` to half of the width:
-------------------code----------------------
img {
  width: 100px;
  border-radius: 50px;
}
-------------------code----------------------

## 4. Positioning the Image
- To push the image to the left side:
  - Use the `float` property:
-------------------code----------------------
img {
  width: 100px;
  border-radius: 50px;
  float: left;
}
-------------------code----------------------

- To add space between the image and the text:
  - Use the `margin-right` property:
-------------------code----------------------
img {
  width: 100px;
  border-radius: 50px;
  float: left;
  margin-right: 10px;
}
-------------------code----------------------

## 5. Styling Text
- To make the **user name** text bold:
  - Apply a CSS rule to the `<p>` element:
-------------------code----------------------
p {
  font-weight: bold;
}
-------------------code----------------------
- However, this affects all `<p>` elements.

## 6. Targeting Specific Elements with Classes
- To apply styles only to the user name:
  1. Add a `class` attribute to the first `<p>`:
-------------------code----------------------
<p class="user-name">Username</p>
-------------------code----------------------
  2. Update the CSS rule to target the class:
-------------------code----------------------
.user-name {
  font-weight: bold;
}
-------------------code----------------------
- Notes:
  - Classes allow you to categorize and style elements independently.
  - `.` is used in CSS to select a class.

## 7. Summary
- CSS syntax is different from HTML.
- Throughout the course, both HTML and CSS will be covered in detail.
- Next topic: **Formatting code using Prettier**.


*** 7-_Formatting_Code ***
# Lesson: Formatting Code with Prettier

## 1. Browsers and White Spaces
- Browsers **ignore white spaces** in HTML and CSS code.
- Example:
  - You can place multiple elements on a single line, and the browser will render the page the same.
- Browsers **do not care** about how the code is formatted.
- However, **formatting code** properly is important for **readability** and **maintenance**.

## 2. Importance of Code Formatting
- Well-formatted code is easier to **read** and **maintain**.
- Good formatting is especially important when working in **teams**.
  - Different people may have different formatting styles.
  - Using a formatter ensures **consistency** across all team members.

## 3. Introduction to Prettier
- **Prettier** is a plugin that formats code consistently and automatically.
- It works for multiple languages, including **HTML** and **CSS**.

## 4. Using Prettier in VS Code

### Accessing the Command Palette
- Open the **Command Palette**:
  - On Mac: `Shift + Command + P`
  - On Windows: `Shift + Control + P`

### Formatting the Document
- In the Command Palette, search for **Format Document**.
- Press **Enter**.

### Choosing the Formatter
- If multiple formatters are available, VS Code will ask you to select one.
- Choose **Prettier** as the default formatter for HTML and CSS files.

### Result
- Prettier automatically formats the code properly.
- Elements are no longer placed on the same line unnecessarily.
- Code becomes more organized and easier to understand.

## 5. Automating Code Formatting on Save

### Setting Up Auto-Format
- Go to the top menu:
  - Select **Code** → **Preferences** → **Settings**.
- Search for **Format On Save**.
- Enable the **Format On Save** setting.

### Benefit
- Now, every time you **save** your file, VS Code will automatically format the code using Prettier.
- This saves time and keeps the code consistently formatted without manual effort.


*** 8-_Inspecting_Pages_Using_DevTools ***
# Lesson: Introduction to Inspecting the DOM with DevTools

## 1. Understanding the DOM (Document Object Model)
- When the browser reads an HTML document, it constructs the **Document Object Model (DOM)**.
- The DOM represents the structure of the web page as a tree of objects.

## 2. Viewing the DOM in Action with Chrome DevTools

### Opening DevTools
- Shortcut to open DevTools:
  - On Mac: `Shift + Command + I`
  - On Windows: `Shift + Control + I` (may vary slightly)

### Elements Tab
- In DevTools, go to the **Elements** tab.
- On the left side, you will see the DOM structure.
  - HTML elements such as `<html>`, `<head>`, `<body>`, etc.
- Some extra elements may appear, like `<script>` and `<div>`, injected by **Live Server** for auto-reloading.
  - These can be ignored for now.

### Inspecting Elements
- Hover over an element in the Elements panel:
  - The corresponding element is highlighted in the browser window.
- Click on an element:
  - The **right panel** shows the **styles** applied to that element.

## 3. Modifying Styles in DevTools

### Viewing and Toggling Styles
- See CSS properties like `border-radius`, `width`, etc.
- Enable or disable styles by checking or unchecking them.
- Example:
  - Disabling the `width` property makes the image return to its original size.

### Editing Style Values
- Click on a property value (e.g., `width: 100px`) and change it.
- Use the **up and down arrow keys** to increase or decrease values interactively.
- This helps developers quickly experiment and adjust styles.

## 4. Tracing Styles to Source Code

- In the styles panel, you can see where a style is defined.
- Example:
  - If a style is defined in `index.html` on line 6, clicking the link will jump to that exact line.
- This takes you to the **Sources** tab in DevTools.
- You can return to the **Elements** tab anytime to continue inspecting other elements.

## 5. Summary
- **DevTools** allows you to inspect, modify, and test styles directly in the browser.
- It is a crucial tool for frontend developers to fine-tune layouts and designs.
- More in-depth exploration of DevTools will be covered later in the course.




*** 9-_Validating_Web_Pages ***
# Lesson: HTML and CSS Validation

## 1. Introduction to Validation
- As we write code, mistakes such as typos or incorrect syntax can cause issues with how web pages appear.
- **Validation** helps identify potential errors in our code.
- Even if a page looks correct, validation ensures it follows proper standards.

## 2. Using the Standard HTML Validator

### Accessing the Validator
- Visit **validator.w3.org** — the standard HTML validation service.

### Methods of Validation
- **By URL:** Validate using a live website's address.
  - Not suitable for local development (e.g., `127.0.0.1`).
- **By File Upload:** Upload an HTML file directly.
- **By Direct Input:** Paste the HTML code into the validator.

### Example: Validating a Local File
- Upload the `index.html` file.
- Results:
  - **1 Warning**: Missing `lang` attribute in the `<html>` tag.
    - **Fix**: Add `lang="en"` to the `<html>` tag to specify the page's language.
  - **2 Errors**:
    - **Character Encoding Not Declared**: 
      - Will be discussed in the next section.
    - **Missing `alt` Attribute on Image**:
      - Fix by adding an `alt` attribute to the `<img>` tag, for example:
        - `alt="An image of Mosh Hamadani"`

### Re-validating After Fixes
- After correcting the HTML:
  - Only the character encoding error remains, which will be addressed later.

## 3. CSS Validation

### Accessing the CSS Validator
- Visit **jigsaw.w3.org/css-validator**.
- Alternatively, search "CSS Validator" on Google and use the first link.

### Methods of CSS Validation
- **By URL**
- **By File Upload**
- **By Direct Input**

### Validating Embedded CSS
- Since the CSS is embedded within the HTML file:
  - Copy the CSS code.
  - Paste it into the **Direct Input** section.
  - Validate.

### Results
- No errors found.
- CSS code is correctly written.

## 4. Importance of Validation
- Validation is crucial for:
  - Identifying subtle coding errors.
  - Ensuring proper display across different browsers and devices.
- If a web page does not appear as expected, **start by validating the code** to find possible mistakes.

---

# Summary
- HTML and CSS validation ensures code quality and compatibility.
- Always fix warnings and errors reported by validators.
- Validation helps maintain **professional**, **readable**, and **standard-compliant** code.

