*** 1-_Introduction ***
## Web Development: HTML Essentials

### Overview
In this section, we will dive deeper into **HTML** and explore its essential elements. 
This knowledge is crucial for building well-structured and accessible web pages.

### Topics Covered
- **Text Elements**  
  Learn how to properly display and structure content using headings, paragraphs, and other text-based tags.

- **Links**  
  Understand the correct use of anchor (`<a>`) tags to navigate between pages and external resources.

- **Images**  
  Discover how to embed and optimize images using the `<img>` tag.

- **Lists**  
  Learn the differences and proper use of ordered (`<ol>`), unordered (`<ul>`), and description (`<dl>`) lists.

- **Tables**  
  Explore how to create data tables using `<table>`, `<tr>`, `<td>`, and other related elements.

- **Containers**  
  Use elements like `<div>` and `<span>` to group and style content.

- **Structural and Semantic Elements**  
  Understand the importance of semantic HTML tags such as `<header>`, `<main>`, `<section>`, `<article>`, `<footer>`, and more to improve accessibility and SEO.

### Key Point
Even if you already know HTML basics, it’s highly recommended to go through this section thoroughly. Many developers misuse or overlook these elements, leading to poor structure and user experience.


*** 2-_The_Head_Section ***
## HTML: The `<head>` Section and Meta Elements

### Purpose of the `<head>` Section
- The `<head>` provides **information to browsers and search engines** about the web page.
- It does not contain visible content but includes crucial metadata and configuration.

### Creating a Basic HTML Boilerplate
- **Shortcut Trick**:  
  Typing `!` and pressing `Tab` in most code editors (like VS Code) generates a basic HTML template.
- Boilerplate includes:
  - `<!DOCTYPE html>` declaration
  - `<html lang="en">`: Root element with language attribute (a best practice)
  - `<head>` section: Metadata and configuration
  - `<body>` section: Visible content

---

## Elements in the `<head>` Section

### 1. Meta Charset
-------------------code----------------------
<meta charset="UTF-8">
-------------------code----------------------
- Defines the **character encoding** for the document.
- **UTF-8** is the most commonly used encoding today, capable of representing characters from most of the world's languages.
- Computers interpret characters as numbers. Character sets map characters to numeric values.
- **ASCII** was an early character set, limited to English characters.
- **UTF-8** supports almost all languages.

### 2. Meta Viewport
-------------------code----------------------
<meta name="viewport" content="width=device-width, initial-scale=1.0">
-------------------code----------------------
- Controls the **viewport**, which is the visible area of a web page.
- Ensures web pages are **responsive** and display correctly on all devices (mobiles, tablets, desktops).
- Sets initial width and zoom level.
- Critical for **mobile-friendly** design.

### 3. Meta Keywords (Optional)
-------------------code----------------------
<meta name="keywords" content="HTML, CSS, Web Development">
-------------------code----------------------
- Used to specify **keywords** relevant to the page.
- Historically important for **SEO**, but now largely ignored by modern search engines.
- Still useful for documentation or self-reference.

### 4. Meta Description
-------------------code----------------------
<meta name="description" content="Learn the basics of HTML and how to build structured web pages.">
-------------------code----------------------
- Provides a **brief summary** of the page.
- Often displayed in search engine results under the page title.
- Helps improve click-through rates and context for users.

---

## Best Practices
- **Always include** at least:
  - `<meta charset="UTF-8">`
  - `<meta name="viewport" content="...">`
- Use optional meta elements for better structure and clarity.

---



What is SEO?
**SEO** stands for **Search Engine Optimization**.

It is the practice of improving a website’s visibility and ranking in search engine results (like Google, Bing, etc.) to attract more **organic (non-paid)** traffic.

### Key Aspects of SEO:

1. **On-Page SEO**  
   - Using proper HTML structure (like headings and semantic tags)  
   - Writing descriptive titles and meta descriptions  
   - Including relevant keywords in content  
   - Optimizing image alt text and internal links

2. **Technical SEO**  
   - Fast page loading speed  
   - Mobile-friendliness  
   - Clean URL structure  
   - Secure connection (HTTPS)  
   - Proper use of meta tags and robots.txt

3. **Off-Page SEO**  
   - Getting backlinks from other reputable websites  
   - Social media mentions  
   - Building site authority and trust

4. **Content Quality**  
   - Providing valuable, relevant, and original content  
   - Using natural language that answers users' queries  
   - Regularly updating content

### Why SEO Matters:
- **Increases visibility** in search engine results
- **Drives free traffic** to websites
- **Improves user experience**
- **Builds credibility** and trust with audiences

*** 3-_Text ***
## HTML: Working with Text and Headings

### 1. **Paragraphs (`<p>`)**
- Used to display blocks of text.
- Example:
  -------------------code----------------------
  <p>I love to teach you HTML.</p>
  -------------------code----------------------

---

### 2. **Emphasis (`<em>`)**
- Highlights important words or phrases.
- Semantically indicates **emphasis**; default style is *italic*.
- Helps search engines identify meaningful content.
- Example:
  -------------------code----------------------
  <p>I love to teach you <em>HTML</em>.</p>
  -------------------code----------------------

> **Note**: Use `<em>` for meaning, not for styling. CSS should handle visual styles.

#### Styling Emphasized Text (Optional Example)
-------------------code----------------------
<style>
  em {
    color: red;
    font-style: normal;
  }
</style>
-------------------code----------------------

---

### 3. **Strong (`<strong>`)**
- Indicates **strong importance** or urgency.
- Default style is **bold**.
- Example:
  -------------------code----------------------
  <strong>Important</strong>
  -------------------code----------------------

---

### 4. **Deprecated Tags**
- `<i>`: Previously used for italic text. Now considered deprecated.
- `<b>`: Previously used for bold text. Also deprecated.
- **Do not use `<i>` or `<b>`** for styling; use CSS instead.

---

### 5. **VS Code Shortcut: Wrap with Abbreviation**
- To quickly wrap a word in an HTML tag:
  - Select the word
  - Open Command Palette:  
    - Mac: `Shift + Command + P`  
    - Windows: `Shift + Ctrl + P`
  - Search: **Wrap with Abbreviation**
  - Enter the tag (e.g., `em`), press Enter

---

## HTML Headings: `<h1>` to `<h6>`

### Purpose
- Used to **structure content hierarchically**, not based on size.
- **`<h1>`** = most important heading  
- **`<h6>`** = least important heading

### Rules
- Each page should have **one and only one `<h1>`** tag.
- Follow a **logical order**:
  - `<h1>` → `<h2>` → `<h3>`, etc.
  - Don’t skip levels just to change visual size (use CSS instead).

### Example Structure
-------------------code----------------------
<h1>Web Development Tutorial</h1>

<h2>HTML</h2>
<p>HTML tutorial</p>

<h3>Code</h3>
<h3>Exercise</h3>

<h2>CSS</h2>
<p>CSS tutorial</p>
-------------------code----------------------

### Benefit
- Proper heading structure improves **accessibility** and **SEO**.
- Helps search engines understand the content hierarchy of the page.

---

### Summary
- Use semantic tags like `<em>` and `<strong>` for meaning, not for style.
- Avoid using deprecated tags like `<i>` and `<b>`.
- Structure content with heading tags logically for better readability and SEO.

*** 4-_Entities ***

## HTML Entities: Displaying Special Characters

### 1. **Problem with Reserved Characters**
- Some characters (like `<`, `>`, `&`) are **reserved in HTML** and cannot be used directly in content.
- Example:
  -------------------code----------------------
  <p><HTML></p> <!-- This will be interpreted as a tag, not text -->
  -------------------code----------------------
- The browser hides the content because it thinks it's an invalid or unknown HTML element.

---

### 2. **Solution: HTML Entities**
- **HTML entities** are used to display reserved/special characters.
- Format: `&` + `entity_name` + `;`
- Commonly used entities:
  - `&lt;` → `<` (less than)
  - `&gt;` → `>` (greater than)
  - `&copy;` → © (copyright)
  - `&nbsp;` → Non-breaking space

#### Example:
-------------------code----------------------
<p>&lt;HTML&gt;</p>      <!-- Displays: <HTML> -->
<p>&copy; 2025</p>     <!-- Displays: © 2025 -->
-------------------code----------------------

---

### 3. **Viewing a Full List**
- Full HTML entity reference can be found by Googling:  
  **“HTML entities site:dev.w3.org”**
- Example site: [dev.w3.org](https://dev.w3.org/html5/html-author/#character-references)

> Note: You do **not need to memorize** most entities. Only a few are commonly used.

---

### 4. **Non-breaking Space (`&nbsp;`)**
- Used to **prevent line breaks** between words.
- Helpful when you want two words to **stay on the same line**, regardless of screen width.
  
#### Example:
-------------------code----------------------
<p>This&nbsp;is&nbsp;important.</p>
-------------------code----------------------

- This prevents words from breaking onto different lines.

---

### 5. **Generating Dummy Text in VS Code**
- Type: `lorem50` + `Tab` to generate 50 words of dummy text.
- Useful for testing layout and formatting.
  
#### Example:
-------------------code----------------------
<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit...</p>
-------------------code----------------------

---

### 6. **Using Find and Replace for Special Cases**
- To replace a space with a non-breaking space:
  - Open search (`Ctrl + F` or `Cmd + F`)
  - Find the target words
  - Replace the regular space with `&nbsp;`

---

### Summary
- Use **HTML entities** to display reserved or special characters.
- Common ones:
  - `&lt;` for `<`
  - `&gt;` for `>`
  - `&copy;` for ©
  - `&nbsp;` to prevent line breaks
- Avoid memorizing them—use references when needed.

---

*** 5-_Hyperlinks ***
### **HTML Links (Anchor Tags) - Lecture Summary**

#### **1. Creating Basic Links**

* The `<a>` (anchor) element is used to create links.
* Use the `href` attribute to specify the link destination.
* `href` stands for "Hypertext Reference", and it typically contains a **URL**.

#### **2. Linking to Another HTML Page**

* Example: Link from `index.html` to `about.html` using a **relative URL**.

  -------------------code----------------------
  <a href="about.html">About Me</a>
  -------------------code----------------------

#### **3. Relative vs. Absolute URLs**

* **Relative URL**: Relative to the current file location.

  * If `about.html` is inside a folder `company/`:

    -------------------code----------------------
    <a href="company/about.html">About Me</a>
    -------------------code----------------------
* **Absolute URL**: Starts from the root of the site.

  -------------------code----------------------
  <a href="/company/about.html">About Me</a>
  -------------------code----------------------

#### **4. Using Images as Links**

* Replace link text with an image:

  -------------------code----------------------
  <a href="images/mosh.jpg"><img src="images/mosh.jpg"></a>
  -------------------code----------------------
* Can use CSS to resize large images.

#### **5. Navigating Back Using Relative Paths**

* To go back from a subfolder:

  -------------------code----------------------
  <a href="../index.html">Homepage</a>
  -------------------code----------------------
* `..` navigates one level up in the folder hierarchy.
* Repeat `../` to go multiple levels up if needed.

#### **6. Downloading Files**

* Add the `download` attribute to trigger download:

  -------------------code----------------------
  <a href="images/mosh.jpg" download>My Photo</a>
  -------------------code----------------------

#### **7. Linking to Sections of the Same Page (Fragments)**

* Give the target element an `id`:

  -------------------code----------------------
  <h2 id="section-css">CSS</h2>
  -------------------code----------------------
* Link to it using a hash `#`:

  -------------------code----------------------
  <a href="#section-css">CSS</a>
  -------------------code----------------------

#### **8. Back to Top Link**

* Use an empty fragment to scroll to the top:

  -------------------code----------------------
  <a href="#">Jump to Top</a>
  -------------------code----------------------

#### **9. Linking to External Websites**

* Must include the full URL with protocol:

  -------------------code----------------------
  <a href="https://google.com">Google</a>
  -------------------code----------------------

#### **10. Opening Links in a New Tab**

* Add `target="_blank"`:

  -------------------code----------------------
  <a href="https://google.com" target="_blank">Google</a>
  -------------------code----------------------

#### **11. Linking to an Email Address**

* Use the `mailto:` protocol:

  -------------------code----------------------
  <a href="mailto:programmingwithmosh@gmail.com">Email Me</a>
  -------------------code----------------------

#### **12. Link vs. Hyperlink**

* **Link**: The address/URL itself.
* **Hyperlink**: The clickable HTML element that leads to the link.
* In practice, the terms are often used interchangeably.

*** 6-_Images ***
Here's a clean and well-organized summary of the lecture on **embedding and styling images in HTML**, formatted as lecture notes without using emojis:

---

## **Embedding Images in HTML**

### **Finding and Using Images**

* Use websites like [unsplash.com](https://unsplash.com) to find high-quality, free-to-use images.
* Images are typically available in multiple sizes: small, medium, and large.
* For responsive design, small images are preferred for mobile devices, and larger ones for desktop.
* In this lesson, we use the **small** image version for simplicity.

### **Organizing Image Files**

* After downloading, move the image to the `images/` folder.
* Rename it with a **descriptive name**, e.g., `coffee.jpg`.
* Descriptive filenames improve **search engine optimization (SEO)**.

### **Inserting an Image**

-------------------code----------------------
<img src="images/coffee.jpg" alt="A coffee mug on a table">
-------------------code----------------------

### **The `alt` Attribute**

* Provides a **textual description** of the image.
* Important for:

  * **Accessibility**: Screen readers can read the alt text to visually impaired users.
  * **SEO**: Helps search engines understand your content.
  * **Fallback**: Displays text if the image fails to load.
* **Avoid** generic descriptions like `"image"` or `"image1"`.

### **Demonstrating a Fallback**

* If the `src` is incorrect (e.g., typo), the browser displays the alt text.
* This is useful when:

  * There’s a typo in the filename.
  * The network is down and the image can't load.

---

## **Styling Images with CSS**

### **Basic Styling**

Add a `<style>` block in the `<head>`:

-------------------code----------------------
<style>
  img {
    width: 200px;
    height: 200px;
  }
</style>
-------------------code----------------------

### **Problem: Image Distortion**

* If the original image is **rectangular**, forcing it into a square shape (200x200) causes distortion.
* Example: A round coffee mug appears vertically squashed.

### **Inspecting the Issue**

* Use **Chrome DevTools**:

  * Right-click → Inspect.
  * View applied styles.
  * Toggle `height` to see how the image shape changes.

### **Fixing Distortion with `object-fit`**

-------------------code----------------------css
img {
  width: 200px;
  height: 200px;
  object-fit: cover;
}
-------------------code----------------------

* `object-fit: cover` resizes the image while preserving its aspect ratio and cropping it if needed.
* The image completely covers its containing box.
* This is a commonly used solution for background-like image behavior.

### **Understanding the Containing Box**

* Every HTML element is surrounded by an invisible box.
* CSS styles are applied relative to this box.
* In this example, the box is 200px by 200px.

### **Trying Other `object-fit` Values**

* Values include: `fill`, `contain`, `cover`, `none`, and `scale-down`.
* Use browser dev tools to experiment with different values.
* **Most common value:** `cover`.

---

## **Conclusion**

* Embedding images properly involves both HTML (`<img>`) and CSS for layout and responsiveness.
* The `alt` attribute is essential for accessibility and SEO.
* Use `object-fit` to maintain image proportions and avoid distortion when resizing.


*** 7-_Video_and_Audio ***
**Lecture Notes: Embedding Video and Audio in HTML5**

**I. Introduction**
    *   HTML5 offers strong support for embedding video and audio.
    *   **Real-world Example:** Sketch.com features a video showcasing its tool.
        *   Initially, this example video might lack control buttons (play/pause).
        *   These controls can be easily added.

**II. Acquiring Media Assets**
    *   **Source:** Pexels.com - a website for free photos and videos.
    *   **Process:**
        1.  Search for media (e.g., "ocean").
        2.  Filter by "videos."
        3.  Select a video.
        4.  **Download Considerations:**
            *   Choose an appropriate size (e.g., HD version, which is smaller than full resolution).
            *   **Reason:** Avoid large files to prevent poor user experience on slow connections. Download the smallest practical version.
        5.  **Attribution:** Acknowledge the creator (e.g., "Ruvim" or "Ravim"). Consider donations.
    *   **File Organization:**
        1.  In your project, create a new folder (e.g., `videos`).
        2.  Move the downloaded video into this folder.
        3.  Rename the video file to something descriptive (e.g., `ocean.mp4`).

**III. Embedding Video with the `<video>` Element**
    *   **HTML Tag:** `<video>`
    *   **`src` Attribute:**
        *   Similar to the `<img>` element's `src` attribute.
        *   Set to the path of the video file (e.g., `videos/ocean.mp4`).
        *   Can use relative URLs or absolute URLs (starting with `/`).
    *   **Default Behavior:**
        *   Displays the first frame of the video as a static image.
        *   Renders at the video's full size, which can cause layout issues (e.g., horizontal scrolling).

    **Code Example: Basic Video Embedding**
    -------------------code----------------------html
    <!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Video Embedding Example</title>
        <style>
            /* We'll add styling later */
        </style>
    </head>
    <body>
        <h1>My Awesome Video</h1>
        <!-- 
            Assuming you have a 'videos' folder at the same level as this HTML file,
            and inside 'videos' there's a file named 'ocean.mp4'.
            Replace 'videos/ocean.mp4' with your actual video path.
        -->
        <video src="videos/placeholder-video.mp4"></video>
        <p>Content after the video.</p>
    </body>
    </html>
    -------------------code----------------------

    *   **Styling with CSS:**
        *   Add a `<style>` element in the `<head>` or use an external stylesheet.
        *   Set the `width` property for the `video` element (e.g., `video { width: 400px; }`).
        *   The browser automatically calculates the `height` based on the video's aspect ratio.

    **Code Example: Styling the Video**
    -------------------code----------------------html
    <!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Styled Video Example</title>
        <style>
            video {
                width: 400px; /* Set a fixed width */
                /* The browser will maintain the aspect ratio for height */
                border: 2px solid #333; /* Optional: to see the video element's bounds */
            }
        </style>
    </head>
    <body>
        <h1>My Styled Video</h1>
        <video src="videos/placeholder-video.mp4"></video>
        <p>The video above is now 400px wide.</p>
    </body>
    </html>
    -------------------code----------------------

**IV. Video Attributes**
    *   **`controls` Attribute:**
        *   Adds default browser control buttons (play, pause, volume, fullscreen, etc.).
        *   This is a **boolean attribute**.

    **Code Example: Adding Controls**
    -------------------code----------------------html
    <video src="videos/placeholder-video.mp4" controls></video>
    -------------------code----------------------

    *   **Understanding Boolean Attributes in HTML:**
        *   **Misconception:** Setting them to `true` or `false` (e.g., `controls="false"`).
        *   **Correct Behavior:**
            *   The *presence* of a boolean attribute implies a "true" value.
            *   The *absence* of the attribute implies a "false" value.
            *   Setting it to `controls="false"` will still show the controls because the attribute is present.
            *   To show controls, simply add the attribute: `<video src="..." controls>`. The value assigned is irrelevant.

    **Code Example: Boolean Attributes Demonstration**
    -------------------code----------------------html
    <h2>Boolean Attribute Examples</h2>

    <p>Video with controls (attribute present):</p>
    <video src="videos/placeholder-video.mp4" controls style="width:300px;"></video>

    <p>Video with controls="controls" (attribute present, value is common but not strictly necessary):</p>
    <video src="videos/placeholder-video.mp4" controls="controls" style="width:300px;"></video>

    <p>Video with controls="false" (attribute is STILL PRESENT, so controls will show!):</p>
    <video src="videos/placeholder-video.mp4" controls="false" style="width:300px;"></video>

    <p>Video WITHOUT controls (attribute absent):</p>
    <video src="videos/placeholder-video.mp4" style="width:300px;"></video>
    -------------------code----------------------

    *   **`autoplay` Attribute:**
        *   A boolean attribute.
        *   If present, the video automatically starts playing when the page loads.
        *   **Note:** Many browsers now restrict autoplay with sound unless the user has interacted with the page, or the video is muted. Add the `muted` attribute for more reliable autoplay: `autoplay muted`.
        *   Example: The video on sketch.com.

    **Code Example: Autoplay (often requires `muted`)**
    -------------------code----------------------html
    <video src="videos/placeholder-video.mp4" controls autoplay muted style="width:300px;"></video>
    -------------------code----------------------

    *   **`loop` Attribute:**
        *   A boolean attribute.
        *   If present, the video will automatically restart (loop) when it finishes.

    **Code Example: Looping Video**
    -------------------code----------------------html
    <video src="videos/placeholder-video.mp4" controls loop style="width:300px;"></video>
    -------------------code----------------------

    **Code Example: Combining Attributes**
    -------------------code----------------------html
    <video src="videos/placeholder-video.mp4" controls autoplay muted loop style="width:300px;"></video>
    -------------------code----------------------

**V. Browser Compatibility and Fallbacks**
    *   **Tool for Checking:** caniuse.com - shows browser support for HTML/CSS features.
    *   **Support for `<video>` element:**
        *   "Video tracks" (for subtitles) have less widespread support.
        *   The `<video>` element itself has excellent support across modern browsers.
        *   Very old browsers (e.g., Firefox 2/3, 2006-2008) lack support, but their usage is negligible (e.g., 0.01%).
        *   **Notable Exception:** Opera Mini (released 2015, ~0.88% usage) does *not* support the `<video>` element.
    *   **Providing Fallback Content:**
        *   It's a best practice to provide content for browsers that don't support the `<video>` element.
        *   Place text or other HTML *inside* the opening and closing `<video>` tags.
        *   Example: `<video src="..."><p>Your browser doesn't support videos.</p></video>`
        *   This content will only be displayed if the browser doesn't recognize the `<video>` tag.

    **Code Example: Fallback Content**
    -------------------code----------------------html
    <video src="videos/placeholder-video.mp4" controls style="width:300px;">
        <p>
            Sorry, your browser doesn't support embedded videos.
            You can <a href="videos/placeholder-video.mp4">download the video</a> instead.
        </p>
    </video>
    -------------------code----------------------

**VI. Embedding Audio with the `<audio>` Element**
    *   **HTML Tag:** `<audio>`
    *   Functionality is "exactly like the video element."
    *   Uses the `src` attribute to specify the audio file.
    *   Supports the same boolean attributes (`controls`, `autoplay`, `loop`).
    *   Unlike video, audio doesn't have a visual dimension, so it won't display anything unless `controls` are added.

    **Code Example: Embedding Audio**
    -------------------code----------------------html
    <!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Audio Embedding Example</title>
    </head>
    <body>
        <h1>My Awesome Audio</h1>

        <p>Audio without controls (won't be visible or playable by default UI):</p>
        <!-- Replace 'audio/placeholder-audio.mp3' with your actual audio file path. -->
        <audio src="audio/placeholder-audio.mp3"></audio>

        <p>Audio with controls:</p>
        <audio src="audio/placeholder-audio.mp3" controls></audio>

        <p>Audio with controls, autoplay (may be restricted by browser), and loop:</p>
        <audio src="audio/placeholder-audio.mp3" controls autoplay loop></audio>
        <!-- Note: Autoplay for audio is also often restricted by browsers. -->

        <p>Audio with fallback content:</p>
        <audio src="audio/placeholder-audio.mp3" controls>
            <p>
                Your browser does not support the audio element.
                You can <a href="audio/placeholder-audio.mp3">download the audio</a>.
            </p>
        </audio>

    </body>
    </html>
    -------------------code----------------------

**VII. Conclusion & Next Steps**
    *   This covers the essentials of embedding video and audio.
    *   The next topic to be discussed is "lists."

---

**Complete HTML File Example (incorporating many features):**

Save this as an `.html` file (e.g., `media_example.html`). Create `videos` and `audio` folders in the same directory as this HTML file, and place your media files (e.g., `placeholder-video.mp4`, `placeholder-audio.mp3`) inside them.

-------------------code----------------------html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>HTML5 Media Embedding</title>
    <style>
        body {
            font-family: sans-serif;
            margin: 20px;
            line-height: 1.6;
        }
        h1, h2 {
            color: #333;
        }
        .video-container, .audio-container {
            margin-bottom: 30px;
            padding: 15px;
            border: 1px solid #ddd;
            border-radius: 5px;
        }
        video {
            max-width: 100%; /* Make video responsive */
            height: auto;   /* Maintain aspect ratio */
            display: block; /* Remove extra space below */
            margin-bottom: 10px;
        }
        /* Specific width for demonstration if needed, overrides max-width */
        .fixed-width-video {
            width: 450px; 
        }
        audio {
            width: 100%; /* Make audio controls responsive */
            margin-bottom: 10px;
        }
    </style>
</head>
<body>

    <h1>Embedding Video and Audio in HTML5</h1>

    <div class="video-container">
        <h2>III. Embedding Video with the <code>&lt;video&gt;</code> Element</h2>
        
        <p><strong>Basic Video (first frame, no controls, original size unless styled):</strong></p>
        <!-- Note: Without controls or styling, this might be very large or small -->
        <video src="videos/placeholder-video.mp4"></video> 
        
        <p><strong>Styled Video (450px width, no controls):</strong></p>
        <video src="videos/placeholder-video.mp4" class="fixed-width-video"></video>
    </div>

    <div class="video-container">
        <h2>IV. Video Attributes</h2>

        <p><strong>Video with <code>controls</code>:</strong></p>
        <video src="videos/placeholder-video.mp4" controls class="fixed-width-video"></video>

        <p><strong>Video with <code>controls</code>, <code>autoplay</code> (muted for reliability), and <code>loop</code>:</strong></p>
        <video src="videos/placeholder-video.mp4" controls autoplay muted loop class="fixed-width-video"></video>
        
        <p><strong>Understanding Boolean Attributes:</strong> <code>controls="false"</code> still shows controls because the attribute is present.</p>
        <video src="videos/placeholder-video.mp4" controls="false" class="fixed-width-video"></video>
    </div>

    <div class="video-container">
        <h2>V. Browser Compatibility and Fallbacks</h2>
        <p><strong>Video with Fallback Content:</strong> (Will show if browser doesn't support <code>&lt;video&gt;</code>)</p>
        <video src="videos/placeholder-video.mp4" controls class="fixed-width-video">
            <p>
                Sorry, your browser doesn't support embedded videos.
                You can <a href="videos/placeholder-video.mp4">download the video here</a>.
            </p>
        </video>
    </div>

    <div class="audio-container">
        <h2>VI. Embedding Audio with the <code>&lt;audio&gt;</code> Element</h2>
        
        <p><strong>Basic Audio (invisible without <code>controls</code>):</strong></p>
        <audio src="audio/placeholder-audio.mp3"></audio>
        
        <p><strong>Audio with <code>controls</code>:</strong></p>
        <audio src="audio/placeholder-audio.mp3" controls></audio>

        <p><strong>Audio with <code>controls</code>, <code>autoplay</code> (often restricted), and <code>loop</code>:</strong></p>
        <audio src="audio/placeholder-audio.mp3" controls autoplay loop></audio>
        
        <p><strong>Audio with Fallback Content:</strong></p>
        <audio src="audio/placeholder-audio.mp3" controls>
            <p>
                Your browser does not support the audio element.
                You can <a href="audio/placeholder-audio.mp3">download the audio here</a>.
            </p>
        </audio>
    </div>

    <p><strong>VII. Conclusion & Next Steps:</strong> The next topic is lists.</p>

</body>
</html>
-------------------code----------------------

*** 8-_Lists ***
**Lecture Notes: HTML Lists**

**I. Introduction to HTML Lists**
    *   HTML provides three main types of list elements for structuring content.
    *   Focus of this section: HTML for structure; styling (CSS) will be covered later.

**II. Unordered Lists (`<ul>`)**
    *   **Definition:** `<ul>` stands for "unordered list."
    *   **Purpose:** Used when the order of items does *not* matter.
    *   **HTML Structure:**
        *   The list is defined by the `<ul>` element.
        *   Each item within the list is defined by an `<li>` (list item) element.
        -------------------code----------------------
        <ul>
            <li>About Me</li>
            <li>Courses</li>
            <li>Subscribe</li>
            <li>Contact Me</li>
        </ul>
        -------------------code----------------------
    *   **Common Use Cases:**
        *   Navigation menus (very common application).
        *   Listing images.
        *   Products in a shopping cart.
        *   Any collection of items where sequence isn't critical.
    *   **Default Appearance & Styling:**
        *   By default, list items are displayed with bullet points.
        *   The appearance of these bullet points (or their absence) is controlled by CSS.
        *   **CSS Property:** `list-style-type`
            *   `list-style-type: square;` (changes bullets to squares)
            *   `list-style-type: none;` (removes bullet points)
        -------------------code----------------------css
        /* Example CSS */
        ul {
            list-style-type: square; /* or none, circle, disc (default), etc. */
        }
        -------------------code----------------------
        *   CSS can also be used to lay out lists horizontally (e.g., for navigation bars), which will be covered later.
    *   **Nesting Lists:**
        *   Unordered lists can be nested within other list items to create a hierarchy.
        *   Example: A "Courses" list item containing another `<ul>` for specific course names.
        -------------------code----------------------
        <ul>
            <li>About Me</li>
            <li>Courses
                <ul> <!-- Nested UL -->
                    <li>HTML</li>
                    <li>JavaScript</li>
                    <li>Git</li>
                </ul>
            </li>
            <li>Subscribe</li>
            <li>Contact Me</li>
        </ul>
        -------------------code----------------------
    *   **Zen Coding (Emmet) Tip:**
        *   To quickly generate multiple list items: type `li*3` and press `Tab`.
        *   This creates:
            -------------------code----------------------
            <li></li>
            <li></li>
            <li></li>
            -------------------code----------------------

**III. Ordered Lists (`<ol>`)**
    *   **Definition:** `<ol>` stands for "ordered list."
    *   **Purpose:** Used when the order of items *does* matter. Changing the order can change the meaning.
    *   **HTML Structure:**
        *   The list is defined by the `<ol>` element.
        *   Each item within the list is defined by an `<li>` element.
    *   **Example (Recipe Steps):**
        -------------------code----------------------
        <ol>
            <li>Preheat the oven.</li>
            <li>Place the ingredients on the crust.</li>
            <li>Put the pizza in the oven for 20 minutes.</li>
        </ol>
        -------------------code----------------------
    *   **Default Appearance:**
        *   List items are typically displayed with numbers (1, 2, 3...).
    *   **Zen Coding (Emmet) Tip:**
        *   To quickly generate an ordered list with items: type `ol>li*3` and press `Tab`.
        *   This creates:
            -------------------code----------------------
            <ol>
                <li></li>
                <li></li>
                <li></li>
            </ol>
            -------------------code----------------------

**IV. Description Lists (`<dl>`)**
    *   **Definition:** `<dl>` stands for "description list."
    *   **Purpose:** Used for implementing glossaries or displaying metadata, where you have terms and their corresponding descriptions/details.
    *   **HTML Structure:**
        *   The list is defined by the `<dl>` element.
        *   Inside the `<dl>`, you have pairs (or groups) of:
            *   `<dt>`: Description Term (the word or phrase being defined/described).
            *   `<dd>`: Description Details (the definition or details for the preceding term).
    *   **Example 1: Glossary**
        -------------------code----------------------
        <dl>
            <dt>HTML</dt>
            <dd>Hypertext Markup Language</dd>
            <dt>CSS</dt>
            <dd>Cascading Style Sheets</dd>
        </dl>
        -------------------code----------------------
    *   **Example 2: Metadata (Course Information)**
        *   A single `<dt>` can be followed by multiple `<dd>` elements if there are multiple details for one term.
        -------------------code----------------------
        <dl>
            <dt>Title</dt>
            <dd>The Ultimate HTML and CSS Course</dd>

            <dt>Author</dt>
            <dd>Mosh Hamedani</dd>

            <dt>Skills</dt>
            <dd>HTML</dd>
            <dd>CSS</dd>
            <dd>Responsive Design</dd>
            <dd>Search Engine Optimization</dd>
        </dl>
        -------------------code----------------------
        *   **Zen Coding (Emmet) Tip:** `dd*3` for multiple description details.
    *   **Default Appearance & Styling:**
        *   Terms (`<dt>`) and details (`<dd>`) are typically displayed on separate lines, with details often indented.
        *   CSS can be used to customize the appearance (e.g., make terms bold, add padding).

**V. Summary & Key Takeaways**
    *   `<ul>`: For lists where item order is not important (bullet points by default).
    *   `<ol>`: For lists where item order is crucial (numbered by default).
    *   `<dl>`: For term/definition pairs or metadata (terms and their details).
    *   HTML provides the structure; CSS controls the presentation.
    *   Zen Coding (Emmet) can significantly speed up HTML writing.

**VI. Next Steps**
    *   The next topic to be discussed is "tables."

---

*** 9-_Tables ***
**Lecture Notes: HTML Tables**

**I. Introduction to Tables (`<table>`)**
    *   **Purpose:** The `<table>` element is used for representing tabular data (data organized in rows and columns).
    *   **Historical Misuse:** In the past, tables were sometimes used for page layout. This is now considered bad practice. Modern layout techniques (e.g., Flexbox, Grid) are preferred and will be covered later.
    *   **Core Principle:** Use tables *only* for displaying data that naturally fits a table structure.

**II. Basic Table Structure**
    *   **Table Rows (`<tr>`):**
        *   A table consists of one or more rows.
        *   Each row is defined by the `<tr>` (table row) element.
    *   **Table Cells:**
        *   Within each row, there are one or more cells.
        *   **Data Cells (`<td>`):**
            *   Defined by the `<td>` (table data) element.
            *   Contain the actual data of the table.
        *   **Header Cells (`<th>`):**
            *   Defined by the `<th>` (table header) element.
            *   Typically used for the cells in the first row (or first column) to provide labels or titles for the columns/rows.
            *   By default, text in `<th>` is usually bold and centered.

    **HTML Example: Basic Table**
    -------------------code----------------------
    <table>
        <tr> <!-- First row -->
            <td>Marketing</td> <!-- First cell (data) -->
            <td>$100</td>      <!-- Second cell (data) -->
        </tr>
        <tr> <!-- Second row -->
            <td>Accounting</td>
            <td>$200</td>
        </tr>
    </table>
    -------------------code----------------------
    *   **Zen Coding (Emmet) Tip for Rows with Data Cells:** `tr>td*2` (creates a row with two data cells)

**III. Styling Tables with CSS**
    *   **Default Appearance:** By default, HTML tables have minimal styling (no borders, etc.).
    *   **Adding Borders:**
        *   Use the `border` CSS property.
        *   Syntax: `border: <thickness> <style> <color>;` (e.g., `border: 1px solid gray;`)
        *   **Applying to Table and Cells:** To apply borders to both the table and its cells, group selectors:
            -------------------code----------------------
            table, td, th { /* Apply to table, td, and th elements */
                border: 1px solid gray;
            }
            -------------------code----------------------
            *   This follows the **DRY (Don't Repeat Yourself)** principle to avoid code duplication.
    *   **Collapsing Borders:**
        *   By default, cells have individual borders, creating a "double border" effect or spacing.
        *   Use `border-collapse: collapse;` on the `table` element to merge adjacent cell borders into a single border.
            -------------------code----------------------
            table {
                border-collapse: collapse;
            }
            -------------------code----------------------
    *   **Adding Cell Padding:**
        *   To create space between cell content and its border, use the `padding` property on `td` and `th` elements.
            -------------------code----------------------
            td, th {
                padding: 5px;
            }
            -------------------code----------------------

**IV. Adding Table Headers (`<th>`)**
    *   Headers provide context for the data in columns or rows.
    *   **HTML Example: Table with Headers**
        -------------------code----------------------
        <table>
            <tr>
                <th>Category</th> <!-- Header cell -->
                <th>Amount</th>   <!-- Header cell -->
            </tr>
            <tr>
                <td>Marketing</td>
                <td>$100</td>
            </tr>
            <tr>
                <td>Accounting</td>
                <td>$200</td>
            </tr>
        </table>
        -------------------code----------------------
    *   **Zen Coding (Emmet) Tip for Rows with Header Cells:** `tr>th*2`
    *   **Styling Note:** Remember to include `th` in CSS rules for borders and padding if you want them styled consistently with `td` elements.

**V. Semantic Table Structure (Improving Meaning)**
    *   To make tables more meaningful for search engines and assistive technologies (like screen readers), use semantic grouping elements:
        *   **`<thead>` (Table Head):**
            *   Groups the header content of the table.
            *   Contains one or more `<tr>` elements that define the table header (usually with `<th>` cells).
        *   **`<tbody>` (Table Body):**
            *   Groups the main data content of the table.
            *   Contains one or more `<tr>` elements with the table's data (usually with `<td>` cells).
        *   **`<tfoot>` (Table Foot):**
            *   Groups the footer content of the table.
            *   Contains one or more `<tr>` elements, often used for summaries or totals.
            *   Optional.

    **HTML Example: Semantic Table Structure**
    -------------------code----------------------
    <table>
        <thead>
            <tr>
                <th>Category</th>
                <th>Amount</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>Marketing</td>
                <td>$100</td>
            </tr>
            <tr>
                <td>Accounting</td>
                <td>$200</td>
            </tr>
        </tbody>
        <tfoot>
            <tr>
                <th>Total</th>
                <th>$300</th>
            </tr>
        </tfoot>
    </table>
    -------------------code----------------------
    *   **Benefit:** This structure is called **Semantic HTML** because it adds meaning to the markup, making it more understandable for machines. The visual output remains the same, but the underlying structure is improved.
    *   **Keyboard Shortcut (Editor Tip):**
        *   Hold `Shift` + `Up/Down Arrow` to select multiple lines.
        *   Hold `Alt` (or `Option` on Mac) + `Up/Down Arrow` to move selected lines of code.

**VI. Spanning Columns and Rows**
    *   **`colspan` Attribute (for `<th>` or `<td>`):**
        *   Allows a cell to span across multiple columns.
        *   The value is the number of columns the cell should occupy.
        *   Example: `<th colspan="2">Expenses</th>` (This header cell will span two columns).
    *   **`rowspan` Attribute (for `<th>` or `<td>`):** (Not explicitly covered in detail in this segment, but a related concept)
        *   Allows a cell to span across multiple rows.

    **HTML Example: `colspan`**
    -------------------code----------------------
    <table>
        <thead>
            <tr>
                <th colspan="2">Expenses</th> <!-- Spans 2 columns -->
            </tr>
            <tr>
                <th>Category</th>
                <th>Amount</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>Marketing</td>
                <td>$100</td>
            </tr>
        </tbody>
    </table>
    -------------------code----------------------

**VII. Styling Differences: `<th>` vs. `<td>`**
    *   **Default `<th>` Styling:**
        *   Text is typically **bold**.
        *   Text is typically **center-aligned**.
    *   **Default `<td>` Styling:**
        *   Text is typically normal weight.
        *   Text is typically **left-aligned**.
    *   **Overriding Alignment:**
        *   Use the `text-align` CSS property to change alignment.
        *   Example: To left-align text in the `<tfoot>`:
            -------------------code----------------------
            tfoot {
                text-align: left; /* Affects all cells within the tfoot */
            }
            /* Or more specifically for cells within tfoot: */
            tfoot th, tfoot td {
                text-align: left;
            }
            -------------------code----------------------

**VIII. Summary**
    *   Use `<table>` for tabular data only.
    *   Structure tables with `<tr>` (rows), `<td>` (data cells), and `<th>` (header cells).
    *   Enhance semantics with `<thead>`, `<tbody>`, and `<tfoot>`.
    *   Style tables using CSS for borders, padding, alignment, etc.
    *   Use `colspan` (and `rowspan`) for cells that need to span multiple columns (or rows).

---

*** 10-_Containers ***
**Lecture Notes: Grouping Elements (Containers) - `<div>` and `<span>`**

**I. Introduction to Containers**
    *   **Purpose:** Often, we need to group multiple HTML elements together, primarily for styling or layout purposes. These groups are called containers.
    *   **Real-world Examples (adobe.com):**
        *   **Navigation Bar:** Contains an image (logo) and menu items.
        *   **Hero Unit:** Contains a background image, heading, text, and links.
        *   Other sections on a webpage are also often grouped within containers.

**II. The `<div>` (Division) Element**
    *   **Definition:** `<div>` is the most commonly used generic container element.
    *   **Visual Appearance:**
        *   By itself, a `<div>` has no visual appearance. It's purely a structural element for grouping.
        *   If you add a `<div>` with content inside, you'll see the content, but not the `<div>` itself (unless styled).
    *   **Styling with CSS:**
        *   `<div>` elements are typically styled using CSS.
        *   **Targeting `<div>`s:**
            *   Styling all `div` elements directly (`div { ... }`) is usually too broad.
            *   **Using Classes:** It's best practice to assign a `class` attribute to a `<div>` to target it specifically for styling.
                -------------------code----------------------
                <div class="product">
                    <p>Product information...</p>
                    <a href="#">Learn more</a>
                </div>
                -------------------code----------------------
                -------------------code----------------------
                /* Targets any element with the class "product" */
                .product {
                    background-color: gold;
                }

                /* More specific: targets only div elements with the class "product" */
                /* div.product {
                    background-color: gold;
                } */
                /* Using just .product is often more flexible. */
                -------------------code----------------------
    *   **Block-Level Element:**
        *   A `<div>` is a **block-level element**.
        *   **Characteristics of Block-Level Elements:**
            1.  They always start on a new line.
            2.  They take up the full available width of their parent container by default (even if their content is small).
        *   **Example:** If you have two `<div>` elements, the second one will appear below the first, each occupying the full width.
            -------------------code----------------------
            <div class="product" style="background-color: gold;">Content 1</div>
            <div class="product" style="background-color: lightblue;">Content 2</div>
            -------------------code----------------------
        *   **Controlling Width:** The `width` of a block-level element can be set using CSS (e.g., `width: 300px;`).
    *   **Duplicating Lines (Editor Shortcut):**
        *   Select lines of code.
        *   Hold `Shift` + `Alt` (or `Option` on Mac) + `Down Arrow` to duplicate the selected lines.

**III. The `<span>` Element**
    *   **Definition:** `<span>` is another generic container element, often used for styling smaller pieces of text *within* a larger block of content (like a paragraph).
    *   **Inline Element:**
        *   A `<span>` is an **inline element**.
        *   **Characteristics of Inline Elements:**
            1.  They do *not* start on a new line.
            2.  They only take up as much width as their content requires.
            3.  They flow along with the surrounding text.
    *   **Use Case: Highlighting Text**
        *   **Problem with `<div>` for inline styling:** If you wrap a single word in a paragraph with a `<div>` to style it, the `<div>` (being block-level) will force that word onto a new line and take up the full width, disrupting the layout.
        *   **Solution with `<span>`:** Wrapping the word with a `<span>` allows you to apply styles (e.g., background color) without breaking the flow of the text.
        -------------------code----------------------
        <p>
            This is some <span class="highlight">important</span> text.
        </p>
        -------------------code----------------------
        -------------------code----------------------
        .highlight {
            background-color: yellow;
            font-weight: bold;
        }
        -------------------code----------------------
    *   **Multiple Cursors / Multi-Selection (Editor Shortcut):**
        *   Select an instance of text (e.g., an opening `<div>` tag).
        *   Press `Ctrl+D` (Windows/Linux) or `Cmd+D` (Mac) to select the next occurrence of that same text. This creates multiple cursors.
        *   You can then edit all selected instances simultaneously.
        *   Press `Esc` (usually twice) to disable multi-cursor editing.

**IV. `<div>` vs. `<span>` Summary**
    *   **`<div>` (Division):**
        *   **Block-level** container.
        *   Used for grouping larger sections of content or for layout purposes.
        *   Starts on a new line and takes full available width by default.
    *   **`<span>`:**
        *   **Inline** container.
        *   Used for grouping smaller, inline pieces of content (often text) for styling, without affecting the overall block flow.
        *   Stays on the same line and only takes up necessary width.

**V. Next Steps**
    *   HTML5 introduces more descriptive (semantic) container elements beyond `<div>` and `<span>`. These will be discussed next.

---

*** 11-_Semantic_Elements ***
Okay, here are the organized lecture notes for "Semantic HTML Elements (Part 1)".

---

**Lecture Notes: Semantic HTML Elements (Part 1)**

**I. Introduction to Semantic HTML**
    *   **Recap:** `<div>` and `<span>` are general-purpose containers.
    *   **HTML5 Enhancement:** HTML5 introduced more descriptive (meaningful) container elements, known as **semantic elements**.
    *   **Purpose of Semantic Elements:**
        *   To provide a clearer structure and meaning to the content of a webpage.
        *   Helps search engines (like Google) better understand the page content and its organization.
        *   Improves accessibility for users relying on assistive technologies (e.g., screen readers).
    *   **Recommendation:** Wherever possible, use specific semantic elements instead of generic `<div>`s and `<span>`s. While many existing web pages heavily use `div`s and `span`s, using semantic elements is the recommended practice moving forward.

**II. The `<article>` Element**
    *   **Purpose:** Represents an independent, self-contained piece of content that could, in principle, be distributed or reused on its own.
    *   **Analogy:** Think of it as something that could be syndicated (like an RSS feed item).
    *   **Examples:**
        *   Blog post
        *   Newspaper article
        *   Forum post
        *   User-submitted comment
        *   Product review
        *   Product card (e.g., on an e-commerce site showcasing multiple products – each product could be an `<article>`)
    *   **Replacing `<div>`:** Instead of `<div class="article">` or `<div class="post">`, use `<article>`.
        -------------------code----------------------
        <!-- Old way (less semantic) -->
        <!--
        <div class="article">
            <h1>My Blog Post Title</h1>
            <p>Some content here...</p>
        </div>
        -->

        <!-- New way (more semantic) -->
        <article>
            <h1>My Blog Post Title</h1>
            <p>Some content here...</p>
            <!-- More content like images, figures, etc. -->
        </article>
        -------------------code----------------------
    *   **Key Idea:** An `<article>` should make sense on its own, even if taken out of the context of the rest of the page.

**III. The `<figure>` and `<figcaption>` Elements**
    *   **`<figure>` Element:**
        *   **Purpose:** Represents a unit of content, typically an image, illustration, diagram, code snippet, or similar, that is referenced in the main flow of the document but can be moved to another part of the page or to an appendix without affecting the main flow.
        *   It's a container specifically for "figures."
        *   Often used to wrap `<img>` elements, tables, lists, etc., that act as figures.
        *   Has no inherent visual characteristics by itself; it's a semantic wrapper.
        *   **VS Code Tip:** Use the command palette (Ctrl+Shift+P or Cmd+Shift+P) and search for "Wrap with abbreviation" or "Emmet: Wrap with Abbreviation" to wrap selected elements (e.g., wrap an `<img>` with `<figure>`).
    *   **`<figcaption>` Element:**
        *   **Purpose:** Provides a caption or legend for its parent `<figure>` element.
        *   Can be placed either before or after the content within the `<figure>`.
        *   **Editor Note:** At the time of the lecture recording, VS Code might not have had full Emmet support for `<figcaption>`, requiring manual typing of the tags.
        -------------------code----------------------
        <article>
            <h1>My Trip</h1>
            <p>I saw many wonderful sights...</p>
            <figure>
                <img src="images/my-coffee.jpg" alt="A cup of coffee">
                <figcaption>My coffee this morning.</figcaption>
            </figure>
            <p>...and the coffee was great!</p>
        </article>
        -------------------code----------------------

**IV. The `<mark>` Element**
    *   **Purpose:** Represents text that is marked or highlighted for reference or notation purposes, due to its relevance in another context.
    *   **Analogy:** Like using a highlighter pen on a physical document.
    *   **Default Styling:** Browsers typically render text within `<mark>` tags with a yellow background. This is a default style and doesn't require explicit CSS for the basic effect.
    *   **Semantic Alternative to `<span class="highlight">`:** Instead of creating a custom class for highlighting, use `<mark>` when the intent is to "mark" text.
        -------------------code----------------------
        <p>Lorem ipsum dolor sit amet, <mark>consectetur</mark> adipiscing elit.</p>
        -------------------code----------------------

**V. The `<time>` Element**
    *   **Purpose:** Represents a specific period in time or a date. It can be used to mark up dates, times, or durations.
    *   **Semantic Benefit:** Makes dates and times machine-readable, which can be beneficial for search engines, calendar applications, etc.
    *   **Visual Appearance:** By default, text within a `<time>` element looks like normal text. Its value is primarily semantic.
    *   **`datetime` Attribute (Optional but Recommended):**
        *   Provides a machine-readable version of the date/time.
        *   This helps browsers and search engines understand the precise date and time, regardless of how it's formatted for human readers.
        *   **Format:**
            *   Date: `YYYY-MM-DD` (e.g., `2021-01-01`)
            *   Date and Time: `YYYY-MM-DD HH:MM` (24-hour format) (e.g., `2021-01-01 17:00`)
            *   Other formats exist for durations, time-zone offsets, etc.
        *   **Editor Note:** At the time of the lecture recording, VS Code might not have had full Emmet support for `<time>`, requiring manual typing.
        -------------------code----------------------
        <article>
            <h1>Important Announcement</h1>
            <p>
                Published on 
                <time datetime="2021-01-01T17:00">January 1st, 2021, at 5 pm</time>.
            </p>
            <p>The event will take place soon...</p>
        </article>
        -------------------code----------------------
        *(Note: The `T` separator between date and time is common in ISO 8601 format, which `datetime` often follows).*

**VI. Importance of Semantic HTML**
    *   Using elements like `<article>`, `<figure>`, `<mark>`, and `<time>` (instead of just `<div>`s and `<span>`s) makes HTML markup more descriptive and meaningful.
    *   This significantly improves how search engines interpret the content and aids accessibility.

**VII. Next Steps**
    *   More semantic elements will be covered in the next lesson.

---

*** 12-_Structuring_a_Web_Page ***
ß
** Lecture Notes: Structuring a Web Page**

**I. Common Page Structure Building Blocks**
    *   Most web pages share a common structural pattern, typically including:
        *   A **Header:** Top section, often containing branding, navigation.
        *   **Main Content:** The primary content of the page.
        *   A **Footer:** Bottom section, often containing copyright, links, contact info.
    *   Optionally, a page might also include:
        *   A **Sidebar:** For content not directly related to the main content (e.g., ads, related links).

**II. Semantic Elements for Page Layout**

    *   **`<header>` Element:**
        *   **Purpose:** Represents introductory content, typically a group of introductory or navigational aids.
        *   **Usage:**
            *   Can be used for the main page header (at the top of the `<body>`).
            *   Can also be used as the header for a `<section>` or an `<article>`.
        *   Often contains headings (`<h1>`-`<h6>`), logos, search forms, navigation (`<nav>`).

    *   **`<nav>` (Navigation) Element:**
        *   **Purpose:** Represents a section of a page whose purpose is to provide navigation links, either within the current document or to other documents.
        *   **Common Content:** Often contains an unordered list (`<ul>`) of links (`<a>`).
        *   **Multiple Instances:** A page can have multiple `<nav>` elements (e.g., main site navigation in the header, secondary navigation in the footer or sidebar).
        -------------------code----------------------
        <header>
            <!-- Logo, site title, etc. -->
            <nav>
                <ul>
                    <li><a href="#">Home</a></li>
                    <li><a href="#">About</a></li>
                    <li><a href="#">Services</a></li>
                </ul>
            </nav>
        </header>
        -------------------code----------------------

    *   **`<main>` Element:**
        *   **Purpose:** Represents the dominant content of the `<body>` of a document. The main content area consists of content that is directly related to or expands upon the central topic of a document, or the central functionality of an application.
        *   **Uniqueness:** A document **must not** include more than one `<main>` element. Using more than one will result in a validation error.
        *   It should not contain content that is repeated across documents, such as sidebars, navigation links, copyright information, site logos, and search forms (these belong in `<header>`, `<footer>`, `<nav>`, or `<aside>`).

    *   **`<section>` Element:**
        *   **Purpose:** Represents a thematic grouping of content, typically with a heading.
        *   Used to divide content within the `<main>` area (or within an `<article>`) into logical pieces.
        *   **Heading Requirement:** Each `<section>` should ideally (and often for validation purposes) begin with a heading element (`<h1>`-`<h6>`) to identify its topic. The level of the heading (`<h2>`, `<h3>`, etc.) depends on its place in the document's outline.
        *   **Example:** A "Top Products" section, a "Testimonials" section.
        -------------------code----------------------
        <main>
            <section>
                <h2>Top Products</h2>
                <article> <!-- Product 1 --> </article>
                <article> <!-- Product 2 --> </article>
            </section>
            <section>
                <h2>Testimonials</h2>
                <article> <!-- Testimonial 1 --> </article>
            </section>
        </main>
        -------------------code----------------------

    *   **`<article>` Element (Recap & Context):**
        *   As covered before, represents independent, self-contained content.
        *   Can be used within a `<section>` (e.g., individual products within a "Products" section, individual testimonials within a "Testimonials" section).

    *   **`<aside>` Element:**
        *   **Purpose:** Represents a portion of a document whose content is only indirectly related to the document's main content.
        *   Often presented as sidebars or call-out boxes.
        *   **Examples:** Advertising, groups of links, author biography (if separate from the main article content).
        -------------------code----------------------
        <body>
            <header>...</header>
            <nav>...</nav>
            <main>
                <!-- Main page content -->
            </main>
            <aside>
                <h3>Related Links</h3>
                <ul>...</ul>
                <p>Advertisements here.</p>
            </aside>
            <footer>...</footer>
        </body>
        -------------------code----------------------

    *   **`<footer>` Element:**
        *   **Purpose:** Represents a footer for its nearest sectioning content or sectioning root element (e.g., `<body>`, `<section>`, `<article>`).
        *   **Usage:**
            *   Typically contains information about its section such as who wrote it, links to related documents, copyright data, etc.
            *   Can be used for the main page footer.
            *   Can also be used as the footer for a `<section>` or an `<article>`.
        -------------------code----------------------
        <footer>
            <p>&copy; 2023 My Awesome Website</p>
            <nav> <!-- Footer navigation -->
                <ul>
                    <li><a href="#">Privacy Policy</a></li>
                    <li><a href="#">Contact</a></li>
                </ul>
            </nav>
        </footer>
        -------------------code----------------------

**III. Flexibility and Context**
    *   **No Single "Correct" Structure:** The way these semantic elements are used depends heavily on the specific content and goals of the webpage. The examples provided are illustrative.
    *   **Nesting Possibilities:**
        *   Multiple `<article>` elements can be inside a `<section>`.
        *   Multiple `<section>` elements can be inside an `<article>` (e.g., a long blog post or newspaper article divided into sections).
    *   **Scope of `<header>` and `<footer>`:** These elements are not limited to just the page level. They can define headers and footers for individual `<article>`s or `<section>`s as well.

**IV. Quick Recap of Key Structural Elements**
    *   **`<main>`:** The primary, unique content of the page (only one per page).
    *   **`<section>`:** Groups related content, usually with a heading.
    *   **`<header>`:** Introductory content for the page, a section, or an article.
    *   **`<footer>`:** Concluding content for the page, a section, or an article.
    *   **`<nav>`:** A collection of navigation links.
    *   **`<aside>`:** Content indirectly related to the main content (e.g., sidebar).
    *   **`<article>`:** Independent, self-contained piece of content.

**V. Importance of Validation**
    *   Validating HTML (using tools like the W3C Markup Validation Service) can help catch structural errors, such as using more than one `<main>` element or forgetting a heading in a `<section>`.

---